{
  "version": 3,
  "sources": ["../../../src/assets/js/nav.js"],
  "sourcesContent": ["// Select DOM elements\r\nconst bodyElement = document.querySelector(\"body\");\r\nconst navbarMenu = document.querySelector(\"#cs-navigation\");\r\nconst hamburgerMenu = document.querySelector(\"#cs-navigation .cs-toggle\");\r\n\r\n// Function to toggle the aria-expanded attribute\r\nfunction toggleAriaExpanded(element) {\r\n    const isExpanded = element.getAttribute(\"aria-expanded\");\r\n    element.setAttribute(\"aria-expanded\", isExpanded === \"false\" ? \"true\" : \"false\");\r\n}\r\n\r\n// Function to toggle the menu open or closed\r\nfunction toggleMenu() {\r\n    hamburgerMenu.classList.toggle(\"cs-active\");\r\n    navbarMenu.classList.toggle(\"cs-active\");\r\n    bodyElement.classList.toggle(\"cs-open\");\r\n    toggleAriaExpanded(hamburgerMenu);\r\n}\r\n\r\n// Add click event listener to the hamburger menu\r\nhamburgerMenu.addEventListener(\"click\", toggleMenu);\r\n\r\n// Add click event listener to the navbar menu to handle clicks on the pseudo-element\r\nnavbarMenu.addEventListener(\"click\", function (event) {\r\n    if (event.target === navbarMenu && navbarMenu.classList.contains(\"cs-active\")) {\r\n        toggleMenu();\r\n    }\r\n});\r\n\r\n// Function to handle dropdown toggle\r\nfunction toggleDropdown(element) {\r\n    element.classList.toggle(\"cs-active\");\r\n    const dropdownButton = element.querySelector(\".cs-dropdown-button\");\r\n    if (dropdownButton) {\r\n        toggleAriaExpanded(dropdownButton);\r\n    }\r\n}\r\n\r\n// Add event listeners to each dropdown element for accessibility\r\nconst dropdownElements = document.querySelectorAll(\".cs-dropdown\");\r\ndropdownElements.forEach(element => {\r\n    let escapePressed = false;\r\n\r\n    element.addEventListener(\"focusout\", function (event) {\r\n        // Skip the focusout logic if escape was pressed\r\n        if (escapePressed) {\r\n            escapePressed = false;\r\n            return;\r\n        }\r\n\r\n        // If the focus has moved outside the dropdown, remove the active class from the dropdown \r\n        if (!element.contains(event.relatedTarget)) {\r\n            element.classList.remove(\"cs-active\");\r\n            const dropdownButton = element.querySelector(\".cs-dropdown-button\");\r\n\r\n            if (dropdownButton) {\r\n                toggleAriaExpanded(dropdownButton);\r\n            }\r\n        }\r\n    });\r\n\r\n    element.addEventListener(\"keydown\", function (event) {\r\n        if (element.classList.contains(\"cs-active\")) {\r\n            event.stopPropagation();\r\n        }\r\n\r\n        // Pressing Enter or Space will toggle the dropdown and adjust the aria-expanded attribute\r\n        if (event.key === \"Enter\" || event.key === \" \") {\r\n            event.preventDefault();\r\n            toggleDropdown(element);\r\n        }\r\n\r\n        // Pressing Escape will remove the active class from the dropdown. The stopPropagation above will stop the hamburger menu from closing\r\n        if (event.key === \"Escape\") {\r\n            escapePressed = true;\r\n            toggleDropdown(element);\r\n        }\r\n    });\r\n\r\n    // Handles dropdown menus on mobile - the matching media query (max-width: 63.9375rem) is necessary so that clicking the dropdown button on desktop does not add the active class and thus interfere with the hover state\r\n    const maxWidthMediaQuery = window.matchMedia(\"(max-width: 63.9375rem)\");\r\n    if (maxWidthMediaQuery.matches) {\r\n        element.addEventListener(\"click\", () => toggleDropdown(element));\r\n    }\r\n});\r\n\r\n// Pressing Enter will redirect to the href\r\nconst dropdownLinks = document.querySelectorAll(\".cs-drop-li > .cs-li-link\");\r\ndropdownLinks.forEach(link => {\r\n    link.addEventListener(\"keydown\", function (event) {\r\n        if (event.key === \"Enter\") {\r\n            window.location.href = this.href;\r\n        }\r\n    });\r\n});\r\n\r\n// If you press Escape and the hamburger menu is open, close it\r\ndocument.addEventListener(\"keydown\", (event) => {\r\n    if (event.key === \"Escape\" && hamburgerMenu.classList.contains(\"cs-active\")) {\r\n        toggleMenu();\r\n    }\r\n});\r\n"],
  "mappings": ";;AACA,MAAM,cAAc,SAAS,cAAc,MAAM;AACjD,MAAM,aAAa,SAAS,cAAc,gBAAgB;AAC1D,MAAM,gBAAgB,SAAS,cAAc,2BAA2B;AAGxE,WAAS,mBAAmB,SAAS;AACjC,UAAM,aAAa,QAAQ,aAAa,eAAe;AACvD,YAAQ,aAAa,iBAAiB,eAAe,UAAU,SAAS,OAAO;AAAA,EACnF;AAGA,WAAS,aAAa;AAClB,kBAAc,UAAU,OAAO,WAAW;AAC1C,eAAW,UAAU,OAAO,WAAW;AACvC,gBAAY,UAAU,OAAO,SAAS;AACtC,uBAAmB,aAAa;AAAA,EACpC;AAGA,gBAAc,iBAAiB,SAAS,UAAU;AAGlD,aAAW,iBAAiB,SAAS,SAAU,OAAO;AAClD,QAAI,MAAM,WAAW,cAAc,WAAW,UAAU,SAAS,WAAW,GAAG;AAC3E,iBAAW;AAAA,IACf;AAAA,EACJ,CAAC;AAGD,WAAS,eAAe,SAAS;AAC7B,YAAQ,UAAU,OAAO,WAAW;AACpC,UAAM,iBAAiB,QAAQ,cAAc,qBAAqB;AAClE,QAAI,gBAAgB;AAChB,yBAAmB,cAAc;AAAA,IACrC;AAAA,EACJ;AAGA,MAAM,mBAAmB,SAAS,iBAAiB,cAAc;AACjE,mBAAiB,QAAQ,aAAW;AAChC,QAAI,gBAAgB;AAEpB,YAAQ,iBAAiB,YAAY,SAAU,OAAO;AAElD,UAAI,eAAe;AACf,wBAAgB;AAChB;AAAA,MACJ;AAGA,UAAI,CAAC,QAAQ,SAAS,MAAM,aAAa,GAAG;AACxC,gBAAQ,UAAU,OAAO,WAAW;AACpC,cAAM,iBAAiB,QAAQ,cAAc,qBAAqB;AAElE,YAAI,gBAAgB;AAChB,6BAAmB,cAAc;AAAA,QACrC;AAAA,MACJ;AAAA,IACJ,CAAC;AAED,YAAQ,iBAAiB,WAAW,SAAU,OAAO;AACjD,UAAI,QAAQ,UAAU,SAAS,WAAW,GAAG;AACzC,cAAM,gBAAgB;AAAA,MAC1B;AAGA,UAAI,MAAM,QAAQ,WAAW,MAAM,QAAQ,KAAK;AAC5C,cAAM,eAAe;AACrB,uBAAe,OAAO;AAAA,MAC1B;AAGA,UAAI,MAAM,QAAQ,UAAU;AACxB,wBAAgB;AAChB,uBAAe,OAAO;AAAA,MAC1B;AAAA,IACJ,CAAC;AAGD,UAAM,qBAAqB,OAAO,WAAW,yBAAyB;AACtE,QAAI,mBAAmB,SAAS;AAC5B,cAAQ,iBAAiB,SAAS,MAAM,eAAe,OAAO,CAAC;AAAA,IACnE;AAAA,EACJ,CAAC;AAGD,MAAM,gBAAgB,SAAS,iBAAiB,2BAA2B;AAC3E,gBAAc,QAAQ,UAAQ;AAC1B,SAAK,iBAAiB,WAAW,SAAU,OAAO;AAC9C,UAAI,MAAM,QAAQ,SAAS;AACvB,eAAO,SAAS,OAAO,KAAK;AAAA,MAChC;AAAA,IACJ,CAAC;AAAA,EACL,CAAC;AAGD,WAAS,iBAAiB,WAAW,CAAC,UAAU;AAC5C,QAAI,MAAM,QAAQ,YAAY,cAAc,UAAU,SAAS,WAAW,GAAG;AACzE,iBAAW;AAAA,IACf;AAAA,EACJ,CAAC;",
  "names": []
}
